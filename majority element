class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        return nums[n/2];
    }
};

T.C-O(nlogn)
S.C-O(1)

APPROACH 2--
using hashmap
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int>majority;
        int n=nums.size();
        for(int i=0;i<n;i++){
            majority[nums[i]]++;
        }
        for(auto it:majority){
            if(it.second>n/2){
                return it.first;
            }
        }
        return 0;
    }
};
T.C=O(N)
S.C=O(1)

APROACH 3--
